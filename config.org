#+title: Doom emacs configuration

This is a literate doom emacs config file.

* Core Setup
** Tangle Headers
#+begin_src elisp :tangle config.el
;; -*- lexical-binding: t; -*-
#+end_src

#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
#+end_src

Don't do init.el
# #+begin_src elisp :tangle "init.el" :comments no
# ;; -*- no-byte-compile: t; -*-
# #+end_src

** Helper Functions
*** Helper for authinfo
#+begin_src elisp :tangle config.el
(require 'auth-source)

(defun get-auth-info (&rest params)
  (let ((match (car (apply 'auth-source-search params))))
    (if match
        (let ((secret (plist-get match :secret)))
          (if (functionp secret)
              (funcall secret)
            secret))
      (error "Password not found for %S" params))))
#+end_src

** Basic Settings
*** Grep no ask for save
#+begin_src elisp :tangle config.el
(setq grep-save-buffers nil)
#+end_src

* Appearance & UI
** Theme and Fonts
I like this theme as it has a lot of not washed out colors.
Week starts at monday here, despite what the Bible says.

#+begin_src elisp :tangle config.el
(setq doom-theme 'tsdh-dark
      display-line-numbers-type t
      calendar-week-start-day 1
      doom-font (font-spec :family "FiraCode Nerd Font" :size 15)
      )
(doom/set-frame-opacity 85)
#+end_src

** Visual Enhancements
*** Indent bars
#+begin_src elisp :tangle config.el
(after! indent-bars
  (setq
   indent-bars-color '(highlight :face-bg t :blend 0.15)
   indent-bars-pattern "."
   indent-bars-width-frac 0.1
   indent-bars-pad-frac 0.1
   indent-bars-zigzag nil
   indent-bars-color-by-depth '(:regexp "outline-\\([0-9]+\\)" :blend 1) ; blend=1: blend with BG only
   indent-bars-highlight-current-depth '(:blend 0.5) ; pump up the BG blend on current
   indent-bars-display-on-blank-lines t)
  )
#+end_src

* Org Mode
** Basic Configuration
*** Emacs start config
Open this and close at the end of org mode configuration
#+begin_src elisp :tangle config.el
(after! org
#+end_src

*** org-mode dirs
#+begin_src elisp :tangle config.el
(setq org-directory "~/org/")
#+end_src

*** Look and feel
**** org-modern
#+begin_src elisp :tangle packages.el
(package! org-modern)
#+end_src

**** indent level
Indent each org mode level a bit more for a better overview
#+begin_src elisp :tangle config.el
(setq org-indent-indentation-per-level 4)
#+end_src

**** 'REVIEW' keyword
#+begin_src elisp :tangle config.el
(defun append-org-todo-keyword (new-keyword)
  "Append a NEW-KEYWORD to the first sequence in `org-todo-keywords`."
  (let ((current-keywords (car org-todo-keywords)))
    (when (eq (car current-keywords) 'sequence)
      (setq org-todo-keywords
            (cons (append current-keywords (list new-keyword))
                  (cdr org-todo-keywords))))))

;; Call the (function )
(append-org-todo-keyword "REVIEW")
#+end_src

**** Custom faces
#+begin_src elisp :tangle config.el
(setq org-todo-keyword-faces
      (append org-todo-keyword-faces
              '(("REVIEW" . (:foreground "light blue" :weight bold))
                ("DONE" . (:foreground "green" :weight bold :strike-through t)))))
(custom-set-faces '(org-drawer ((t (:foreground "grey" :weight bold :height: 1.3)))))
#+end_src

** Export & Integration
*** Org ol-gnus
Add gnus support
#+begin_src elisp :tangle config.el
(add-to-list 'org-modules 'ol-gnus)
#+end_src

*** Org-ql
This allows to index org-mode quickly. Might be a good alternative to org-agenda
#+begin_src elisp :tangle packages.el
(package! org-ql)
#+end_src

** Agenda & Scheduling
*** Agenda format
#+begin_src elisp :tangle config.el
(defun get-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:
- CATEGORY property
- TITLE keyword
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (org-with-point-at 1
                  (when (re-search-forward (concat "^#\\+title: \\(.*\\)")
                                           (point-max) t)
                    (buffer-substring-no-properties
                     (match-beginning 1)
                     (match-end 1)))))
         (category (org-get-category))
         (result
          (or (if (and title
                       (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))

(setq org-agenda-prefix-format
      '((agenda . "   %i %(get-agenda-category 16)%?-2t %-12s %-6e")  ; Agenda items: icon, category, time, and extra info, estimate
        (todo .   "   %i %(get-agenda-category 16) %-12:t %s")   ; TODO items: icon, category, time (if any), and extra info
        (tags .   "   %i %(get-agenda-category 16) %-12:t %s")   ; Tagged items: icon, category, time (if any), and extra info
        (search . "   %i %(get-agenda-category 16) %s")))      ; Search results: icon, category, and extra info
#+end_src

*** Super agenda setup
#+begin_src elisp :tangle packages.el
(package! org-super-agenda)
#+end_src

#+begin_src elisp :tangle config.el
(add-hook 'org-agenda-mode-hook 'org-super-agenda-mode)
(setq org-super-agenda-groups
      '((:log t)  ; Automatically named "Log"
        (:name "Schedule"
         :time-grid t)
        (:name "Today: work"
         :and (:scheduled today
               :todo ("TODO")
               :tag "WORK"))
         (:name "Today: other"
          :and (:scheduled today
               :todo ("TODO"))
          )
        (:habit t)
        (:name "Due today"
         :deadline today)
        (:name "Overdue"
         :and
         (:todo ("TODO")
          :deadline past))
        (:name "Scheduled earlier"
         :and (:scheduled past
               :todo ("TODO")))
        (:name "Due soon"
         :deadline future)
        ;(:name "HOLD"
        ; :todo "HOLD")
        (:discard (:anything))
        )
      )
(custom-set-faces '(org-super-agenda-header ((t (:foreground "dark orange" :weight bold :height: 1.3)))))
(setq org-super-agenda-header-separator "\n---\n")
(add-to-list 'warning-suppress-types '(org-element org-element-parser))
#+end_src

** Org-roam & Knowledge Management
*** TODO files
#+begin_src elisp :tangle config.el
(defun roam-extra:todo-p ()
  "Return non-nil if current buffer has any TODO entry."
  (org-element-map (org-element-parse-buffer 'headline) 'headline
    (lambda (h) (eq (org-element-property :todo-type h) 'todo))
    nil 'first-match))

(defun roam-extra:update-todo-tag ()
  "Update TODO tag in the current buffer."
  (when (and (not (active-minibuffer-window))
             (org-roam-file-p))
    (let* ((tags (roam-extra:get-filetags))
           (is-todo (roam-extra:todo-p)))
      (cond ((and is-todo (not (seq-contains-p tags "todo")))
             (roam-extra:add-filetag "todo"))
            ((and (not is-todo) (seq-contains-p tags "todo"))
             (roam-extra:del-filetag "todo"))))))

(defun roam-extra:get-filetags ()
  (split-string (or (org-roam-get-keyword "filetags") "")))

(defun roam-extra:add-filetag (tag)
  (let* ((new-tags (cons tag (roam-extra:get-filetags)))
         (new-tags-str (combine-and-quote-strings new-tags)))
    (org-roam-set-keyword "filetags" new-tags-str)))

(defun roam-extra:del-filetag (tag)
  (let* ((new-tags (seq-difference (roam-extra:get-filetags) `(,tag)))
         (new-tags-str (combine-and-quote-strings new-tags)))
    (org-roam-set-keyword "filetags" new-tags-str)))

(defun roam-extra:todo-files ()
  "Return a list of roam files containing todo tag."
  (org-roam-db-sync)
  (let ((todo-nodes (seq-filter (lambda (n) (seq-contains-p (org-roam-node-tags n) "todo"))
                                (org-roam-node-list))))
    (seq-uniq (seq-map #'org-roam-node-file todo-nodes))))

(defun roam-extra:update-todo-files (&rest _)
  "Update the value of `org-agenda-files'.
Includes roam files with todo tag and specific additional files."
  (setq org-agenda-files
        (append (roam-extra:todo-files)
                (mapcar (lambda (file) (expand-file-name file org-directory))
                        '("fstart.org" "prive.org" "random_ideas.org" "work.org")))))

(add-hook 'find-file-hook #'roam-extra:update-todo-files)
(add-hook 'org-roam-file-setup-hook #'roam-extra:update-todo-files)
(add-hook 'before-save-hook #'roam-extra:update-todo-files)
(advice-add 'org-agenda :before #'roam-extra:update-todo-files)
#+end_src

*** roam-ref
Capture files from browser bookmarklet
#+begin_src elisp :tangle config.el
(setq org-roam-capture-ref-templates
      '(("r" "ref" plain "%?" :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}") :unnarrowed t)
        ("n" "node" entry "* ${title}\n:PROPERTIES:\n:ID: %(org-id-new)\n:END:\n%?" :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}") :unnarrowed t)))
#+end_src

*** roam-dailies meeting
#+begin_src elisp :tangle config.el
(setq org-roam-dailies-directory "daily"
      org-roam-dailies-capture-templates
      '(("d" "default" entry "* %?" :target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))
        ("m" "meeting" plain
        "* Meeting: %^{Meeting Title|microsoft_daily|9elements}\n:PROPERTIES:\n:Date: %U\n:Participants: %^{Participants|Arthur Heymans}\n:END:\n** Agenda\n-\n\n** Notes\n- %?\n\n** Action Items\n- [ ]\n"
        :target (file+head "%<%Y-%m-%d>-meeting-%^{Meeting Title|microsoft_daily|9elements}.org" "#+title: %<%Y-%m-%d>\n")
         :unnarrowed t)
        )
      )

#+end_src

** Org mode configuration end
#+begin_src elisp :tangle config.el
)
#+end_src

* Development
** Language Support
*** Rust
Don't continue comment on the next line when. This is annoying
#+begin_src elisp :tangle config.el
(setq-hook! 'rust-mode-hook comment-line-break-function nil)
#+end_src

*** Kconfig Mode
Edit Kconfig like a pro
#+begin_src elisp :tangle packages.el
(package! kconfig-mode
  :recipe (:host github :repo "delaanthonio/kconfig-mode")
  :pin "cd87b71c8c1739d026645ece0bbd20055a7a2d4a")
#+end_src

*** SystemRDL Mode
Syntax highlight for systemRDL
#+begin_src elisp :tangle packages.el
(package! systemrdl-mode
  :recipe (:host github :repo "luisgutz/emacs-system-rdl")
  :pin "b6889528a67cd169326422bfbdd6cdd031cbd09b")
#+end_src

#+begin_src elisp :tangle config.el
(use-package! systemrdl-mode)
#+end_src

** Development Tools
*** Unsafe local settings
This allows us to set cargo lsp features in .dir-locals.el
#+begin_src elisp :tangle config.el
(setq safe-local-variable-directories '("/home/arthur/src/caliptra-sw/" "/home/arthur/src/caliptra-mcu-sw"))
#+end_src

*** LSP Configuration
Show types in lsp and allow for larger projects without being bothered all the time about it.

#+begin_src elisp :tangle config.el
(after! lsp-mode
  (setq lsp-inlay-hint-enable t
        lsp-file-watch-threshold 4000)
  )
#+end_src

*** Build Tools
**** Justfile
#+begin_src elisp :tangle packages.el
(package! just-mode)
(package! justl :recipe (:host github :repo "psibi/justl.el"))
#+end_src
#+begin_src elisp :tangle config.el
(after! justl
  (setq justl-shell 'eshell))
#+end_src

*** Version Control
**** Magit
magit-delta is too buggy for now.
#+begin_src elisp :tangle packages.el
;; (package! magit-delta :recipe (:host github :repo "dandavison/magit-delta") :pin "5fc7dbddcfacfe46d3fd876172ad02a9ab6ac616")
#+end_src
#+begin_src emacs-lisp :tangle config.el
(after! magit
  (setq transient-default-level 6)
;;  (magit-delta-mode +1)
  )
#+end_src

* AI & Assistance
** LLM Clients
*** Ellama
#+begin_src elisp :tangle packages.el
(package! ellama)
#+end_src

This gets all the models from openrouter and passes them to ellama.
Btw this code is generated by ellama.
#+begin_src elisp :tangle config.el
(defmacro add-openai-compatible-model (name id url)
  `(cons ,name  (make-llm-openai-compatible
                     :key (get-auth-info
                           :host (url-host (url-generic-parse-url ,url))
                           :user "apikey")
                     :url ,url
                     :chat-model ,id)))

(require 'json)
(require 'url)
(defun fetch-openai-compatible-models (url)
  (let* ((url-parsed (url-generic-parse-url url))
         (hostname (url-host url-parsed))
         (auth (auth-source-search :host hostname :user "apikey" :max 1))
         (token (funcall (plist-get (car auth) :secret))))
    (with-current-buffer
        (let ((url-request-extra-headers
               `(("Authorization" . ,(concat "Bearer " token)))))
          (url-retrieve-synchronously (concat url "/models")))
      (goto-char url-http-end-of-headers)
      (let* ((json-object-type 'alist)
             (json-data (json-read))
             (models (alist-get 'data json-data)))
        (mapcar (lambda (model)
                  (cons (or (alist-get 'name model)
                          (alist-get 'id model))
                        (alist-get 'id model)))
                models)))))


(use-package! ellama
  :bind-keymap ("C-c z" . ellama-command-map)
  )

(after! ellama
  (setopt ellama-language "English")
  (require 'llm-openai)
  (setq ellama-sessions-directory "~/.emacs.d/.local/cache/ellama-sessions")
  (setq llm-warn-on-nonfree nil)
  (setq ellama-providers
        `(,@(let ((url "https://api.openai.com/v1"))
              (mapcar
               (lambda (model)
                 (add-openai-compatible-model (concat (car model) " [openai]") (cdr model) url))
               (fetch-openai-compatible-models url)))
          ,@(let ((url "https://openrouter.ai/api/v1"))
              (mapcar
               (lambda (model)
                 (add-openai-compatible-model (concat (car model) " [openrouter]") (cdr model) url))
               (fetch-openai-compatible-models url)))
          ,@(let ((url "https://api.deepseek.com"))
              (mapcar
               (lambda (model)
                 (add-openai-compatible-model (concat (car model) " [deepseek]") (cdr model) url))
               (fetch-openai-compatible-models url)))))
  (setq ellama-auto-scroll t)
  (setopt ellama-provider (eval (cdr (assoc "NVIDIA: Llama 3.1 Nemotron 70B Instruct" ellama-providers))))
)

#+end_src

*** GPTEL
#+begin_src elisp :tangle packages.el
(package! mcp
  :recipe
  (:host github :repo "lizqwerscott/mcp.el")
  :pin "590383414f65c4d7ea871ce2662e23cd12af64b0")
#+end_src

#+begin_src elisp :tangle config.el
(defun get-ollama-models ()
  "Fetch the list of installed Ollama models."
  (let* ((output (shell-command-to-string "ollama list"))
         (lines (split-string output "\n" t))
         models)
    (dolist (line (cdr lines))  ; Skip the first line
      (when (string-match "^\\([^[:space:]]+\\)" line)
        (push (match-string 1 line) models)))
    (nreverse models)))

(after! gptel
  (setq!
         gptel-default-mode 'org-mode
         gptel-model "deepseek/deepseek-chat"
         gptel-backend
         (gptel-make-openai "OpenRouter"               ;Any name you want
           :host "openrouter.ai"
           :endpoint "/api/v1/chat/completions"
           :stream t
           :key (gptel-api-key-from-auth-source "openrouter.ai")
           :models (mapcar (lambda (model)
                              (cdr model))
                            (fetch-openai-compatible-models "https://openrouter.ai/api/v1")))
         gptel-org-branching-context t)
  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  ;; DeepSeek offers an OpenAI compatible API
  (gptel-make-openai "DeepSeek"       ;Any name you want
    :host "api.deepseek.com"
    :endpoint "/chat/completions"
    :stream t
    :key (gptel-api-key-from-auth-source "api.deepseek.com")
    :models '("deepseek-chat" "deepseek-reasoner"))
  (gptel-make-openai "OpenRouter"               ;Any name you want
    :host "openrouter.ai"
    :endpoint "/api/v1/chat/completions"
    :stream t
    :key (gptel-api-key-from-auth-source "openrouter.ai")
    :models (mapcar (lambda (model)
                      (cdr model))
               (fetch-openai-compatible-models "https://openrouter.ai/api/v1")))
  (gptel-make-anthropic "Claude"          ;Any name you want
    :stream t                             ;Streaming responses
    :key (gptel-api-key-from-auth-source "api.anthropic.com"))
  (gptel-make-ollama "Ollama"             ;Any name of your choosing
    :host "localhost:11434"               ;Where it's running
    :stream t                             ;Stream responses
    :models (get-ollama-models))          ;List of models
  )
(map! :leader
      (:prefix ("G" . "gptel")
       :desc "Start GPTel" "g" #'gptel
       :desc "GPTel menu" "m" #'gptel-menu
       :desc "Send to GPTel" "s" #'gptel-send
       :desc "Connect to MCP" "c" #'gptel-mcp-connect
       :desc "Disconnect from MCP" "d" #'gptel-mcp-disconnect))

(require 'gptel-integrations)
(setq mcp-hub-servers
      '(("filesystem" . (:command "npx" :args ("-y" "@modelcontextprotocol/server-filesystem" "/home/arthur/src")))
        ("fetch" . (:command "uvx" :args ("mcp-server-fetch")))
        ("time" . (:command "uvx" :args ("mcp-server-time" "--local-timezone=Europe/Brussels")))
        ("github" . (:command "podman"
                      :args
                      ("run" "-i" "--rm" "-e" "GITHUB_PERSONAL_ACCESS_TOKEN" "ghcr.io/github/github-mcp-server")
                      :env (:GITHUB_PERSONAL_ACCESS_TOKEN (get-auth-info :user "secret" :host "github-token"))))
        ("OSM" . (:command "uvx" :args ("osm-mcp-server")))
;        ("qdrant" . (:url "http://localhost:8000/sse"))
        ))
#+end_src

## Code Generation
*** Aider.el
Modern AI pair programming tool for Emacs with comprehensive features
#+begin_src elisp :tangle packages.el
;;(package! aider :recipe (:host github :repo "tninja/aider.el"))
#+end_src

#+begin_src elisp :tangle config.el
;; Setup API keys for aider.el
(unless (getenv "OPENAI_API_KEY")
  (setenv "OPENAI_API_KEY" (get-auth-info :user "apikey" :host "api.openai.com")))
(unless (getenv "ANTHROPIC_API_KEY")
  (setenv "ANTHROPIC_API_KEY" (get-auth-info :user "apikey" :host "api.anthropic.com")))
(unless (getenv "DEEPSEEK_API_KEY")
  (setenv "DEEPSEEK_API_KEY" (get-auth-info :user "apikey" :host "api.deepseek.com")))
(unless (getenv "OPENROUTER_API_KEY")
  (setenv "OPENROUTER_API_KEY" (get-auth-info :user "apikey" :host "openrouter.ai")))

;; (use-package aider
;;   :config
;;   (setq aider-args '("--model" "sonnet")
;;         aider-todo-keyword-pair "AI!")
;;   (require 'aider-doom))
#+end_src

*** Aidermacs (DISABLED)
Disabled in favor of aider.el which provides better features and active development
#+begin_src elisp :tangle no
(package! aidermacs :recipe (:host github :repo "MatthewZMD/aidermacs"
                             :files ("aidermacs-backend-comint.el" "aidermacs-backend-vterm.el"
                                     "aidermacs-backends.el" "aidermacs-models.el"
                                     "aidermacs-output.el"  "aidermacs.el"))
)
#+end_src

Add path to include aider installed from PIP
#+begin_src elisp :tangle no
(unless (getenv "OPENAI_API_KEY")
  (setenv "OPENAI_API_KEY" (get-auth-info :user "apikey" :host "api.openai.com")))
(unless (getenv "ANTHROPIC_API_KEY")
  (setenv "ANTHROPIC_API_KEY" (get-auth-info :user "apikey" :host "api.anthropic.com")))
(unless (getenv "DEEPSEEK_API_KEY")
  (setenv "DEEPSEEK_API_KEY" (get-auth-info :user "apikey" :host "api.deepseek.com")))
(unless (getenv "OPENROUTER_API_KEY")
  (setenv "OPENROUTER_API_KEY" (get-auth-info :user "apikey" :host "openrouter.ai")))
(after! aidermacs
  :config
  (setq aidermacs-backend 'vterm)
  (setq aidermacs-watch-files t)
  (setq aidermacs-show-diff-after-change t)
  (map! :leader
        :desc "aidermacs transient menu" "A" #'aidermacs-transient-menu)
  )
#+end_src

## Voice Input
*** Whisper
#+begin_src elisp :tangle packages.el
(package! whisper :recipe (:host github :repo "ArthurHeymans/whisper.el" :files ("whisper.el"))
  :pin "9289efb6dbe472d0f18982dfbf6d14bcc9f998b0")
#+end_src
#+begin_src elisp :tangle config.el
(after! whisper
  (setq whisper-server-mode 'openai
        whisper-openai-api-key (get-auth-info :user "apikey" :host "api.openai.com"))
  )
(map! "C-S-h" #'whisper-run)
#+end_src

* Communication & Social
** Email
*** Mu4e
Show account in view.

#+begin_src elisp :tangle config.el
(setq +mu4e-gmail-accounts '(("arthur@aheymans.xyz" . "/aheymans")
                            ("arthurphilippeheymans@gmail.com" . "/gmail")
                            ("arthur.heymans@9elements.com" . "/9elements")))
(setq mu4e-headers-fields
      '((:account-stripe . 1) (:account . 10) (:human-date . 12) (:flags . 6) (:from-or-to . 25) (:subject)))
(setq mu4e-maildir-shortcuts
  '((:maildir "/aheymans/coreboot" :key  ?c)
    (:maildir "/aheymans/gerrit"   :key  ?i)
    (:maildir "/aheymans/github"   :key  ?g)))
(setq mu4e-update-interval 900)
(setq user-full-name "Arthur Heymans"
      user-mail-address "arthur@aheymans.xyz")
(setq sendmail-program (executable-find "msmtp")
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      send-mail-function 'smtpmail-send-it
      message-send-mail-function 'message-send-mail-with-sendmail)

#+end_src

** Chat
*** IRC
Do socials like neckbears
#+begin_src elisp :tangle config.el
(after! circe
  (defun my-nickserv-password (server)
    (get-auth-info :user "avph" :machine "irc.libera.chat"))

  (setq circe-network-options
         '(("Libera Chat"
            :nick "avph"
            :sasl-username "avph"
            :sasl-password my-nickserv-password
            :channels ("#flashprog")))))
#+end_src

*** Matrix
#+begin_src elisp :tangle packages.el
(package! ement)
#+end_src

** Media
*** Spotify
Do spotify from emacs
#+begin_src elisp :tangle packages.el
(package! smudge)
#+end_src

#+begin_src elisp :tangle config.el
(map! :leader
      :desc "Spotify" "S" #'smudge-command-map)
(use-package! smudge
  :custom
  (smudge-oauth2-client-secret (get-auth-info :user "secret" :host "spotify"))
  (smudge-oauth2-client-id (get-auth-info :user "id" :host "spotify"))
  ;; optional: enable transient map for frequent commands
  (smudge-player-use-transient-map t)
  (smudge-transport 'connect)
  (defhydra hydra-spotify (:hint nil)
    "
^Search^                  ^Control^               ^Manage^
^^^^^^^^-----------------------------------------------------------------
_t_: Track               _SPC_: Play/Pause        _+_: Volume up
_m_: My Playlists        _n_  : Next Track        _-_: Volume down
_f_: Featured Playlists  _p_  : Previous Track    _x_: Mute
_u_: User Playlists      _r_  : Repeat            _d_: Device
^^                       _s_  : Shuffle           _q_: Quit
"
    ("t" smudge-track-search :exit t)
    ("m" smudge-my-playlists :exit t)
    ("f" smudge-featured-playlists :exit t)
    ("u" smudge-user-playlists :exit t)
    ("SPC" smudge-controller-toggle-play :exit nil)
    ("n" smudge-controller-next-track :exit nil)
    ("p" smudge-controller-previous-track :exit nil)
    ("r" smudge-controller-toggle-repeat :exit nil)
    ("s" smudge-controller-toggle-shuffle :exit nil)
    ("+" smudge-controller-volume-up :exit nil)
    ("-" smudge-controller-volume-down :exit nil)
    ("x" smudge-controller-volume-mute-unmute :exit nil)
    ("d" smudge-select-device :exit nil)
    ("q" quit-window "quit" :color blue))

  (bind-key "a" #'hydra-spotify/body smudge-command-map)
  )
#+end_src

* System Integration
** Security
*** GnuPG
Use gnome GPG agent
#+begin_src elisp :tangle config.el
(after! gnus-agent
  (setq epg-pinentry-mode 'nil)
  )
#+end_src

*** SOPS
#+begin_src elisp :tangle packages.el
(package! sops)
#+end_src

** Desktop Integration
*** KDE Connect
#+begin_src elisp :tangle packages.el
(package! kdeconnect)
#+end_src

* Terminal & Shell
** Terminal Emulators
*** aweshell
#+begin_src elisp :tangle config.el
(use-package! aweshell
  :bind (("C-c t n" . aweshell-new)
         ("C-c t p" . aweshell-prev)
         ("C-c t t" . aweshell-next)
         ("C-c t c" . aweshell-clear-buffer)
         ("C-c t s" . aweshell-sudo-toggle)
         ("C-c t d" . aweshell-dedicated-toggle))
  :config
  (setq aweshell-use-exec-path-from-shell t
        aweshell-dedicated-window-height 30))
#+end_src

*** eshell

#+begin_src elisp :tangle config.el
(add-hook 'eshell-mode-hook (lambda () (setenv "TERM" "xterm-256color")))
(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize "┌─[" 'face `(:foreground "green"))
         (propertize (user-login-name) 'face `(:foreground "red"))
         (propertize "@" 'face `(:foreground "green"))
         (propertize (system-name) 'face `(:foreground "blue"))
         (propertize "]──[" 'face `(:foreground "green"))
         (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "yellow"))
         (propertize "]──[" 'face `(:foreground "green"))
         (propertize (concat (eshell/pwd)) 'face `(:foreground "white"))
         (propertize "]\n" 'face `(:foreground "green"))
         (propertize "└─>" 'face `(:foreground "green"))
         (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "white"))
         )))
#+end_src

*** eat
#+begin_src elisp :tangle packages.el
(package! eat)
(package! aweshell :recipe (:host github :repo "manateelazycat/aweshell")
  :pin "db495f29eef9013cf6b3796c3797e0ec76352e3f")
#+end_src
#+begin_src elisp :tangle config.el
(after! eat
    (custom-set-faces
    `(eat-term-color-black   ((t (:foreground "#0d0d0d" :background "#0d0d0d"))))
    `(eat-term-color-red     ((t (:foreground "#FF301B" :background "#FF4352"))))
    `(eat-term-color-green   ((t (:foreground "#A0E521" :background "#B8E466"))))
    `(eat-term-color-yellow  ((t (:foreground "#FFC620" :background "#FFD750"))))
    `(eat-term-color-blue    ((t (:foreground "#1BA6FA" :background "#1BA6FA"))))
    `(eat-term-color-magenta ((t (:foreground "#8763B8" :background "#A578EA"))))
    `(eat-term-color-cyan    ((t (:foreground "#21DEEF" :background "#73FBF1"))))
    `(eat-term-color-white   ((t (:foreground "#EBEBEB" :background "#FEFEF8")))))
  )
#+end_src

*** vterm
Make colors more readable
#+begin_src elisp :tangle config.el
(after! vterm
  (custom-set-faces
    `(vterm-color-default ((t (:foreground ,(doom-color 'fg)))))
    `(vterm-color-black   ((t (:foreground "#0d0d0d" :background "#0d0d0d"))))
    `(vterm-color-red     ((t (:foreground "#FF301B" :background "#FF4352"))))
    `(vterm-color-green   ((t (:foreground "#A0E521" :background "#B8E466"))))
    `(vterm-color-yellow  ((t (:foreground "#FFC620" :background "#FFD750"))))
    `(vterm-color-blue    ((t (:foreground "#1BA6FA" :background "#1BA6FA"))))
    `(vterm-color-bright-blue ((t (:foreground "#1BA6FA" :background "#1BA6FA"))))
    `(vterm-color-magenta ((t (:foreground "#8763B8" :background "#A578EA"))))
    `(vterm-color-cyan    ((t (:foreground "#21DEEF" :background "#73FBF1"))))
    `(vterm-color-white   ((t (:foreground "#EBEBEB" :background "#FEFEF8")))))
  (setq vterm-titles t)
  (setq vterm-always-compile-module t))
#+end_src

* Navigation & Search
** Search Tools
*** Consult
#+begin_src elisp :tangle config.el
(map! :leader
      :desc "Run consult-ripgrep"
      "gr" #'consult-ripgrep)
#+end_src
